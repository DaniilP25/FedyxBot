// import { saveData, loadData } from './data';

// const dynamicData = {
//   name: 'John',
//   age: 30,
// };

// saveData(dynamicData).then(() => {
//   loadData().then((data) => console.log(data));
// });

import { Bot, InlineKeyboard, InputMediaBuilder } from "grammy";
import { InputMediaPhoto, InputMediaVideo, InputMediaDocument, InputMediaAudio } from '@grammyjs/types';

import * as fs from 'fs';
import * as yaml from 'js-yaml';

const fileContents = fs.readFileSync('./config.yaml', 'utf8');
const config = yaml.load(fileContents) as {[key: string]: any};
const bot = new Bot(config.token);

function sync_yaml(config: {[key: string]: any}) {
  const yamlString = yaml.dump(config);
  fs.writeFileSync('config.yaml', yamlString);
}

const msgButtons = new InlineKeyboard()                    // –∫–Ω–æ–ø–∫–∏ –±–∞–Ω —Ä–∞–∑–±–∞–Ω —É–¥–∞–ª–∏—Ç—å
  .text("‚õî", "ban")
  .text("‚úÖ", "unban")
  .text("üóëÔ∏è", "delete");

// bot.on("message", async (ctx) => {
//     await ctx.reply(ctx.message.text!);
// });

bot.command("start", async (ctx) => {                      // /start
    await ctx.reply(config.helloMessage);
});

// —Ö—É–π–Ω—è —Å –æ–ø–ª–∞—Ç–æ–π
// bot.command("buy", async (ctx) => {
//   try {
//       const invoiceLink = await bot.api.createInvoiceLink(
//           "–¥–µ—Ñ",
//           "–ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –¥–µ—Ñ–∞ –±–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –Ω–∞–ª–æ–≥–æ–≤",
//           "{}",
//           "1744374395:TEST:781426a4c1472b6b1ee6", // –¢–æ–∫–µ–Ω –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
//           "RUB",
//           [{amount: 10000, label: "–¥–µ—Ñ"}]
//       );
//       await ctx.reply(`${invoiceLink}`);
//   } catch (error) {
//       console.error("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–Ω–≤–æ–π—Å–∞:", error);
//   }
// });

// bot.on("pre_checkout_query", async (ctx) => {
//   try {
//       await ctx.answerPreCheckoutQuery(true); // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã
//   } catch (error) {
//       console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ pre_checkout_query:", error);
//   }
// });

// bot.on("message:successful_payment", async (ctx) => {
//   try {
//       await ctx.reply("–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");
//   } catch (error) {
//       console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã:", error);
//   }
// });


bot.on('message', async (ctx) => {
    const chatType = ctx.chat.type;

    if (chatType === 'private') {                                        // –ø–æ–≤–µ–¥–µ–Ω–∏–µ –±–æ—Ç–∞ –≤ –ª—Å, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏ —Ñ–æ—Ç–æ –≤ –≥—Ä—É–ø–ø—É, –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–∞–Ω

        if (config.banList.includes(ctx.from.id)) { // –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–∞–Ω
          ctx.reply(config.bannedMessage);
          return;
        }

        const message = ctx.message;
        const media: any[] = [];

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ç–æ
        if (message.photo && Array.isArray(message.photo)) {
            message.photo.forEach(photo => {
              media.push(InputMediaBuilder.photo(photo.file_id));
            });
        }

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∏–¥–µ–æ
        if (message.video) {media.push(InputMediaBuilder.video(message.video.file_id))}

        if (message.video && Array.isArray(message.video)) {
            message.video.forEach(video => {
                media.push(InputMediaBuilder.video(video.file_id));
            });
        }

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—É–¥–∏–æ
        if (message.audio) {media.push(InputMediaBuilder.audio(message.audio.file_id))}

        if (message.audio && Array.isArray(message.audio)) {

            message.audio.forEach(audio => {
              media.push(InputMediaBuilder.audio(audio.file_id));
            });
        }

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã
        if (message.document) {media.push(InputMediaBuilder.document(message.document.file_id))}

        if (message.document && Array.isArray(message.document)) {

            message.document.forEach(document => {
              media.push(InputMediaBuilder.document(document.file_id));
            });

        }

        if (media.length > 0) {

          await ctx.api.sendMediaGroup(config.targetGroupId, media);

          if (message.caption) {

            await bot.api.sendMessage(config.targetGroupId,
`<b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b> <code>${message.caption}</code>
üë§ <a href="tg://user?id=${ctx.from.id}">${ctx.from.first_name}</a>
<tg-spoiler>${ctx.from.id}</tg-spoiler>`,
            {parse_mode: "HTML", reply_markup: msgButtons})

          }
          else {

            await bot.api.sendMessage(config.targetGroupId,
`<b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! –í–ª–æ–∂–µ–Ω–∏—è –≤—ã—à–µ</b>
üë§ <a href="tg://user?id=${ctx.from.id}">${ctx.from.first_name}</a>
<tg-spoiler>${ctx.from.id}</tg-spoiler>`,
            {parse_mode: "HTML", reply_markup: msgButtons})
          }

        } else {

          await bot.api.sendMessage(config.targetGroupId,
`<b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b> <code>${message.text}</code>
üë§ <a href="tg://user?id=${ctx.from.id}">${ctx.from.first_name}</a>
<tg-spoiler>${ctx.from.id}</tg-spoiler>`,
          {parse_mode: "HTML", reply_markup: msgButtons})
        }

        await ctx.react(config.successEmoji);


  } else if (chatType === 'group' || chatType === 'supergroup') {

        if (ctx.chat.id == config.targetGroupId) {

            try {

                const id = ctx.msg.reply_to_message!.text!.split("\n").slice(-1)[0];
                const message = ctx.message.text!;
                await bot.api.sendMessage(id,
`<b>${message}</b>\n
üë§ ${ctx.from.first_name}`,
                {parse_mode: "HTML"});

            }

            catch (err) {await bot.api.sendMessage(config.targetGroupId, `<b>–û—à–∏–±–∫–∞:</b> <code>${String(err)}</code>`, {parse_mode: "HTML"});}
        }

        else {

            try {
                await ctx.api.leaveChat(ctx.chat.id);
                console.log(`–ë–æ—Ç –≤—ã—à–µ–ª –∏–∑ –≥—Ä—É–ø–ø—ã ${ctx.chat.id}`);
            }

            catch (error) {console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –≥—Ä—É–ø–ø—ã ${ctx.chat.id}:`, error);}

        }

    }

});

bot.callbackQuery("ban", async (ctx) => {

  if (config.trustedUsers.includes(ctx.callbackQuery.from.id)) {

    const id = Number(ctx.callbackQuery.message!.text!.split("\n").slice(-1)[0]);

    if (config.banList.includes(id)) {
      await ctx.answerCallbackQuery({text: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!"});
    }
    else {
      config.banList.push(id);
      sync_yaml(config);

      await ctx.answerCallbackQuery({text: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"});
    }

  }
  else {await ctx.answerCallbackQuery({text: "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –±–æ—Ç–æ–º"});}

});

bot.callbackQuery("unban", async (ctx) => {

  if (config.trustedUsers.includes(ctx.callbackQuery.from.id)) {

    const id = Number(ctx.callbackQuery.message!.text!.split("\n").slice(-1)[0]);

    if (config.banList.includes(id))  {

      delete config.banList[config.banList.indexOf(id)]
      sync_yaml(config);

      await ctx.answerCallbackQuery({text: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"});

    }
    else {await ctx.answerCallbackQuery({text: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!"});}

  }

  else {await ctx.answerCallbackQuery({text: "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –±–æ—Ç–æ–º"});}

});

bot.callbackQuery("delete", async (ctx) => {

  if (config.trustedUsers.includes(ctx.callbackQuery.from.id)) {

    await ctx.api.editMessageText(ctx.chat!.id, ctx.msgId!, `<i>üë§ <a href="tg://user?id=${ctx.callbackQuery.from.id}">${ctx.callbackQuery.from.first_name}</a> —É–¥–∞–ª–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ.</i>`, {parse_mode: "HTML"});
    await ctx.answerCallbackQuery({text: "–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ"});

  }
  else {await ctx.answerCallbackQuery({text: "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –±–æ—Ç–æ–º"});}

});

bot.start();