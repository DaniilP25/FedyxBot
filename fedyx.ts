import { Bot, session, Context, InlineKeyboard, SessionFlavor, CallbackQueryContext, CommandContext } from "grammy";
import {
  conversations,
  createConversation,
  type Conversation,
  type ConversationFlavor,
} from "@grammyjs/conversations";
import { QueryResultRow } from "pg";
import { db_query } from "./db";
import * as fs from 'fs';
import * as yaml from 'js-yaml';
import { formatUnixTime, isPremium, runBot } from "./bot";

// –¢–∏–ø–∏–∑–∞—Ü–∏—è
interface SessionData {}
type MyContext = Context & ConversationFlavor<Context> & SessionFlavor<SessionData>;
type MyConversationContext = Context;
type MyConversation = Conversation<MyContext, MyConversationContext>;

const fileContents = fs.readFileSync('./config.yaml', 'utf8');
const config = yaml.load(fileContents) as {[key: string]: any};

function sync_yaml(config: {[key: string]: any}) {
  const yamlString = yaml.dump(config);
  fs.writeFileSync('config.yaml', yamlString);
}

const bot = new Bot<MyContext>(config.fedyxToken);

// Middleware
bot.use(conversations());
bot.use(createConversation(getToken));

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
const startMenu = new InlineKeyboard()
  .text("ü§ñ –ú–æ–∏ –±–æ—Ç—ã", "mybots")
  .text("üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", "support")
  .row()
  .text("üí∏ –ü–æ–¥–ø–∏—Å–∫–∞", "sub")
  .text("‚ûï –ù–æ–≤—ã–π –±–æ—Ç", "newbot");

const buyPremiumPls = new InlineKeyboard()
  .text("üí∏ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", "sub");

// –ü–æ—Ç—É–∂–∏–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
(async () => {
  const tokens_row = await db_query('SELECT token FROM apps;');
  let token, isValid;

  for (let i = 0; i < tokens_row.length; i++) {
    try {
      token = tokens_row[i]['token'];
      isValid = await validateToken(token, 0);
      if (isValid) {
        runBot(token);
      }
    }

    catch {}
  }
})();

export async function register(id: number) {
  const db = {
    async checkUserExists(id: number): Promise<boolean> {
      const result: QueryResultRow = await db_query(
        `SELECT EXISTS(SELECT 1 FROM customers WHERE id = $1)`,
        [id]
      );
      return result[0]["exists"];
    },

    async createUser(id: number): Promise<void> {
      await db_query(
        `INSERT INTO customers(id, premium, tokens) VALUES($1, TO_TIMESTAMP(0), $2)`,
        [id, []]
      );
    },
  };

  if (!(await db.checkUserExists(id))) {
    await db.createUser(id);
  }
}

async function start(ctx: CommandContext<MyContext>) {
  await register(ctx.from!.id);
  try {
    await ctx.editMessageText(
      `<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n<i>–í–∞—à–∏ –ø—Ä–µ–¥–ª–æ–∂–∫–∏</i> - —Å–æ–∑–¥–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–∫–∞–º–∏\n<i>–ü–æ–¥–¥–µ—Ä–∂–∫–∞</i> - —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –±–æ—Ç–∞, –ø–∏—Å–∞—Ç—å –µ—Å–ª–∏ –±–æ—Ç –≤—ã–∫–ª—é—á–∏–ª—Å—è –∏–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –æ–ø–ª–∞—Ç–æ–π\n<i>–ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ</i> - –¥–µ–Ω–µ–∂–Ω–æ–µ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥–µ –±–æ—Ç–∞, —Å –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ–º –≤ –≤–∏–¥–µ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤ –≤ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ –±–æ—Ç–∞`,
      { reply_markup: startMenu, parse_mode: "HTML" }
    );
  }
  catch {
    await ctx.reply(
      `<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n<i>–í–∞—à–∏ –ø—Ä–µ–¥–ª–æ–∂–∫–∏</i> - —Å–æ–∑–¥–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–∫–∞–º–∏\n<i>–ü–æ–¥–¥–µ—Ä–∂–∫–∞</i> - —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –±–æ—Ç–∞, –ø–∏—Å–∞—Ç—å –µ—Å–ª–∏ –±–æ—Ç –≤—ã–∫–ª—é—á–∏–ª—Å—è –∏–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –æ–ø–ª–∞—Ç–æ–π\n<i>–ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ</i> - –¥–µ–Ω–µ–∂–Ω–æ–µ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥–µ –±–æ—Ç–∞, —Å –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ–º –≤ –≤–∏–¥–µ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤ –≤ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ –±–æ—Ç–∞`,
      { reply_markup: startMenu, parse_mode: "HTML" }
    );
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ /start
bot.command("start", async (ctx) => {
  await start(ctx); 
});

async function mybots(ctx: CallbackQueryContext<MyContext>) {
  const tokens_row = await db_query('SELECT token FROM apps WHERE authorID = $1;', [ctx.from.id]);
  let token, isValid;
  let bots = ''; //–Ω–µ –ø–∏—à–∏—Ç–µ —Å—é–¥–∞ –ø–ª–∑ (–ø–æ—Ç–æ–º —É–±–µ—Ä–µ–º)

  let botButtons = new InlineKeyboard();

  for (let i = 0; i < tokens_row.length; i++) {
    try {
      token = tokens_row[i]['token'];
      isValid = await validateToken(token, 0);
      if (isValid) {
        const botCheck = new Bot(token); // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
        const botInfo = await botCheck.api.getMe();
        bots += `\n<a href="https://t.me/${botInfo.username}">${botInfo.first_name}</a>`;
        botButtons = botButtons.text(botInfo.first_name, `botButtons${token}`);
      }
    }
    catch {}
  }
  botButtons.row();
  botButtons.text("üîô –ù–∞–∑–∞–¥", `back${0}`);

  await ctx.editMessageText(`ü§ñ–°–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤:\n${bots}`, {parse_mode: "HTML", reply_markup: botButtons});
}

// Callback –∫–Ω–æ–ø–∫–∏
bot.callbackQuery("mybots", async (ctx) => {
  await mybots(ctx);
});

bot.callbackQuery(/^botButtons(.+)/, async (ctx) => {
  const buttonId = ctx.callbackQuery.data; // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
  const token = buttonId.replace("botButtons", "");
  let premium_row = await isPremium(ctx.from.id);  
  // let date = new Date(premium_row[1] * 1000);
  // const time = premium_row[1];
  const time_row = await db_query("SELECT EXTRACT(EPOCH FROM weektimestamp AT TIME ZONE 'UTC') AS unix_timestamp FROM APPS WHERE token = $1", [token]);
  const time = parseInt(time_row[0]['unix_timestamp']);
  const updLimitDate = await formatUnixTime(time);
  const botButton = new Bot(token);
  const botInfo = await botButton.api.getMe();
  let botButtons = new InlineKeyboard();
  // botButtons = botButtons; //.text()
  let weekLimitText; //, subText;
  // const balance_row = db_query('SELECT balance FROM CUSTOMERS WHERE id = $1', [ctx.from.id]);

  if (premium_row[0]) {
    weekLimitText = "–õ–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –Ω–µ–¥–µ–ª—é: –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π";

    // subText = `Premium (–¥–æ ${date})`;
  }
  else {
    const weekLimit_row = await db_query('SELECT weekLimit FROM apps WHERE token = $1', [token]);
    let weekLimit = weekLimit_row[0]['weeklimit'];
    weekLimitText = `–õ–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –Ω–µ–¥–µ–ª—é: ${weekLimit}/1000 (–æ–±–Ω–æ–≤–∏—Ç—Å—è ${updLimitDate})`;
    // subText = "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç";
  }
  
  botButtons.text("üîô –ù–∞–∑–∞–¥", `back${1}`);


  const text = `–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ <a href="https://t.me/${botInfo.username}">${botInfo.first_name}</a>
${weekLimitText}`;
  await ctx.editMessageText(text, {parse_mode: "HTML", reply_markup: botButtons});
}); // –ü–æ–¥–ø–∏—Å–∫–∞: ${subText} // –ë–∞–ª–∞–Ω—Å: ${balance_row[0]['balance']}‚ÇΩ

bot.callbackQuery(/^back(.+)/, async (ctx) => {
  const callbackData = ctx.callbackQuery.data;
  const currentPage = parseInt(callbackData.replace("back", ""), 10);
  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–∑ callback_data
  
  if (currentPage == 0) {
    await ctx.editMessageText(`<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n<i>–í–∞—à–∏ –ø—Ä–µ–¥–ª–æ–∂–∫–∏</i> - —Å–æ–∑–¥–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–∫–∞–º–∏\n<i>–ü–æ–¥–¥–µ—Ä–∂–∫–∞</i> - —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –±–æ—Ç–∞, –ø–∏—Å–∞—Ç—å –µ—Å–ª–∏ –±–æ—Ç –≤—ã–∫–ª—é—á–∏–ª—Å—è –∏–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –æ–ø–ª–∞—Ç–æ–π\n<i>–ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ</i> - –¥–µ–Ω–µ–∂–Ω–æ–µ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥–µ –±–æ—Ç–∞, —Å –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ–º –≤ –≤–∏–¥–µ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤ –≤ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ –±–æ—Ç–∞`,
      {
      parse_mode: "HTML",
      reply_markup: startMenu
    });
  }
  else if (currentPage == 1) {
    await mybots(ctx);
  }

});

// –ü—Ä–∏–º–µ—Ä –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
// function generateKeyboard(page: number): InlineKeyboard {
//   if (page === 0) {
//     return startMenu;    
//   }
//   else {
//     return new InlineKeyboard();
//   }
// }

bot.callbackQuery("support", async (ctx) => {
  await ctx.reply(`–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –ø–∏—à–∏—Ç–µ –≤ <a href="https://t.me/fedyx_support">–ø–æ–¥–¥–µ—Ä–∂–∫—É</a>`, {parse_mode: "HTML"});
});

bot.callbackQuery("sub", async (ctx) => {
  await ctx.reply("–ü—Ä–∏–æ–±—Ä–µ—Ç–∞—è –ø–æ–¥–ø–∏—Å–∫—É –≤–≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ:\n 1. –ß—Ç–æ-—Ç–æ,\n 2. –ß—Ç–æ-—Ç–æ,\n 3. –ß—Ç–æ-—Ç–æ"); // –∏–∑ notes.md –∫—Ä–∞—Å–∏–≤–æ –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å
});

bot.callbackQuery("newbot", async (ctx) => {
  const rawBotCount = await db_query('SELECT COUNT(token) AS count FROM APPS WHERE authorid = $1', [ctx.from.id]);
  const botCount = parseInt(rawBotCount[0]["count"]);
  const premium = await isPremium(ctx.from.id);

  if (premium[0] === true) {
    if (botCount >= 3) {
      await ctx.reply("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –±–æ—Ç–æ–≤.");
    }
    else {
      await ctx.conversation.enter("getToken");
    }
  }
  else {
    if (botCount >= 1) {
      await ctx.reply("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –±–æ—Ç–æ–≤! –ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏—Ç—å –ª–∏–º–∏—Ç.",
        {reply_markup: buyPremiumPls}
      );
    }
    else {
      await ctx.conversation.enter("getToken");
    }
  }
});

// bot noviy
async function getToken(conversation: MyConversation, ctx: MyConversationContext) {
  await ctx.reply(
    `–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞ü§ñ, –≤–∞–º –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω —É <b>@BotFather</b>.\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤ —á–∞—Ç:`,
    { parse_mode: "HTML" }
  );

  const { message } = await conversation.waitFor("message:text");
  const token = message.text.trim();
  const authorID = ctx.from?.id;

  if (!authorID) {
    await ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
    return;
  }

  let isValid = false;
  try {
    isValid = await validateToken(token, 0);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ validateToken:", error);
    await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–æ–∫–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
    return;
  }

  if (!isValid) {
    await ctx.reply("‚ùå –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω –æ—Ç @BotFather.");
    return;
  }

  try {
    await conversation.external(() =>
      db_query(
        `INSERT INTO apps(token, authorID, weekTimestamp, helloMessage, timeoutMessage, banMessage, unbanMessage, sendMessage, targetGroupID)
         VALUES($1, $2, (NOW() + INTERVAL '7 days') AT TIME ZONE 'UTC', $3, $4, $5, $6, $7, $8)`,
        [token, authorID, '', '', '', '', '', 0]
      )
    );
    await ctx.reply("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!");
    validateToken(token, 0);
    runBot(token);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö:", error);
    await ctx.reply("‚ùå –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω –æ—Ç @BotFather.");
  }

  return token;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞
async function validateToken(token: string, count: number): Promise<boolean> {
  try {
    if (count < 4) {
      const res = await fetch(`https://api.telegram.org/bot${token}/getMe`);
      const data = await res.json();
      return data.ok === true;
    }
    else {
      return false;
    }
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ –∫ Telegram API:", err);
    validateToken(token, count + 1);
    return false;
  }
}

bot.start();