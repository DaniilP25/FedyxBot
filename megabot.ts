import { Bot, session, Context, InlineKeyboard, SessionFlavor } from "grammy";
import {
  conversations,
  createConversation,
  type Conversation,
  type ConversationFlavor,
} from "@grammyjs/conversations";
import { Client, QueryResult, QueryResultRow } from "pg";
import { db_query } from "./db";

// –¢–∏–ø–∏–∑–∞—Ü–∏—è
interface SessionData {}
type MyContext = Context & ConversationFlavor<Context> & SessionFlavor<SessionData>;
type MyConversationContext = Context;
type MyConversation = Conversation<MyContext, MyConversationContext>;

const bot = new Bot<MyContext>("7719267045:AAE6qwgfcbpkVNmVnd1JB_zSrevff-V-s_0");

// Middleware
bot.use(conversations());
bot.use(createConversation(getToken));

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
const startMenu = new InlineKeyboard()
  .text("ü§ñ –ú–æ–∏ –±–æ—Ç—ã", "mybots")
  .text("üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", "support")
  .text("üí∏ –ü–æ–¥–ø–∏—Å–∫–∞", "sub")
  .text("‚ûï –ù–æ–≤—ã–π –±–æ—Ç", "newbot");

// –û–±—Ä–∞–±–æ—Ç–∫–∞ /start
bot.command("start", async (ctx) => {
  const db = {
    async checkUserExists(id: number): Promise<boolean> {
      const result: QueryResultRow = await db_query(
        `SELECT EXISTS(SELECT 1 FROM customers WHERE id = $1)`,
        [id]
      );
      return true;
    },

    async createUser(id: number): Promise<void> {
      await db_query(
        `INSERT INTO customers(id, premium, tokens) VALUES($1, TO_TIMESTAMP(0) AT TIME ZONE 'UTC', $2)`,
        [id, []]
      );
    },
  };

  const userId = ctx.from?.id;
  if (!userId) return;

  if (!(await db.checkUserExists(userId))) {
    await db.createUser(userId);
  }

  await ctx.reply(
    `<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n<i>–í–∞—à–∏ –ø—Ä–µ–¥–ª–æ–∂–∫–∏</i> - —Å–æ–∑–¥–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–∫–∞–º–∏\n<i>–ü–æ–¥–¥–µ—Ä–∂–∫–∞</i> - —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –±–æ—Ç–∞, –ø–∏—Å–∞—Ç—å –µ—Å–ª–∏ –±–æ—Ç –≤—ã–∫–ª—é—á–∏–ª—Å—è –∏–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –æ–ø–ª–∞—Ç–æ–π\n<i>–ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ</i> - –¥–µ–Ω–µ–∂–Ω–æ–µ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥–µ –±–æ—Ç–∞, —Å –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ–º –≤ –≤–∏–¥–µ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤ –≤ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ –±–æ—Ç–∞`,
    { reply_markup: startMenu, parse_mode: "HTML" }
  );
});

// Callback –∫–Ω–æ–ø–∫–∏
bot.callbackQuery("mybots", async (ctx) => {
  await ctx.reply(`–°–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤:\n...`);
});

bot.callbackQuery("support", async (ctx) => {
  await ctx.reply(`–ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã? –ù–∞–ø–∏—à–∏ –Ω–∞–º –≤ <a href="https://t.me/tgts_support">–ø–æ–¥–¥–µ—Ä–∂–∫—É</a>.`, {
    parse_mode: "HTML",
  });
});

bot.callbackQuery("sub", async (ctx) => {
  await ctx.reply("–ü–ª—é—Å—ã –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –≤—Å–µ —Ç–∞–∫–æ–µ, –ø–æ—Ç–æ–º –Ω–æ—Ä–º–∞–ª—å–Ω–æ –æ—Ñ–æ—Ä–º–ª—é.");
});

bot.callbackQuery("newbot", async (ctx) => {
  await ctx.conversation.enter("getToken");
});

// –†–∞–∑–≥–æ–≤–æ—Ä
async function getToken(conversation: MyConversation, ctx: MyConversationContext) {
  await ctx.reply(
    `–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞, –≤–∞–º –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω —É <b>@BotFather</b>.\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –≤ —ç—Ç–æ—Ç —á–∞—Ç:`,
    { parse_mode: "HTML" }
  );

  const { message } = await conversation.waitFor("message:text");
  const token = message.text;
  const authorID = ctx.from?.id;

  if (!authorID) {
    await ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
    return;
  }

  try {
    if (await validateToken(token)) {
      await conversation.external(() =>
        db_query(
          `INSERT INTO apps(token, authorID, helloMessage, timeoutMessage, banMessage, unbanMessage, sendMessage, targetGroupID)
           VALUES($1, $2, $3, $4, $5, $6, $7, $8)`,
          [token, authorID, '', '', '', '', '', 0]
        )
      );  
      await ctx.reply("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!");
    }
    else {
      await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–æ—Ç–∞. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–æ—Ç–∞:", error);
    await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–æ—Ç–∞. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }

  return token;
}

async function validateToken(token: string) {
  try {
    const validateBot = new Bot(token);
    validateBot.start();
    validateBot.stop();
    return true;  
  }
  catch {
    return false;
  }
}

async function runBot(token: string) {

}

bot.start();